/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c ActiveConnection -p generated/org_freedesktop_networkmanager_activeconnection /home/kazushin/WorkSpace/Deepin/dde-qt-dbus-factory/xml/org.freedesktop.NetworkManager.ActiveConnection.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "org_freedesktop_networkmanager_activeconnection.h"

/*
 * Implementation of interface class __ActiveConnection
 */

__ActiveConnection::__ActiveConnection(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : DBusExtendedAbstractInterface(service, path, staticInterfaceName(), connection, parent)
{
    connect(this, &__ActiveConnection::propertyChanged, this, &__ActiveConnection::onPropertyChanged);

}

__ActiveConnection::~__ActiveConnection()
{
}

void __ActiveConnection::onPropertyChanged(const QString &propName, const QVariant &value)
{
    if (propName == QStringLiteral("Connection"))
    {
        const QDBusObjectPath Connection = qvariant_cast<QDBusObjectPath>(value);
        if (m_Connection != Connection)
        {
            m_Connection = Connection;
            emit ConnectionChanged(m_Connection);
        }
        return;
    }

    if (propName == QStringLiteral("Default"))
    {
        const bool Default = qvariant_cast<bool>(value);
        if (m_Default != Default)
        {
            m_Default = Default;
            emit DefaultChanged(m_Default);
        }
        return;
    }

    if (propName == QStringLiteral("Default6"))
    {
        const bool Default6 = qvariant_cast<bool>(value);
        if (m_Default6 != Default6)
        {
            m_Default6 = Default6;
            emit Default6Changed(m_Default6);
        }
        return;
    }

    if (propName == QStringLiteral("Devices"))
    {
        const QList<QDBusObjectPath> Devices = qvariant_cast<QList<QDBusObjectPath>>(value);
        if (m_Devices != Devices)
        {
            m_Devices = Devices;
            emit DevicesChanged(m_Devices);
        }
        return;
    }

    if (propName == QStringLiteral("Dhcp4Config"))
    {
        const QDBusObjectPath Dhcp4Config = qvariant_cast<QDBusObjectPath>(value);
        if (m_Dhcp4Config != Dhcp4Config)
        {
            m_Dhcp4Config = Dhcp4Config;
            emit Dhcp4ConfigChanged(m_Dhcp4Config);
        }
        return;
    }

    if (propName == QStringLiteral("Dhcp6Config"))
    {
        const QDBusObjectPath Dhcp6Config = qvariant_cast<QDBusObjectPath>(value);
        if (m_Dhcp6Config != Dhcp6Config)
        {
            m_Dhcp6Config = Dhcp6Config;
            emit Dhcp6ConfigChanged(m_Dhcp6Config);
        }
        return;
    }

    if (propName == QStringLiteral("Id"))
    {
        const QString Id = qvariant_cast<QString>(value);
        if (m_Id != Id)
        {
            m_Id = Id;
            emit IdChanged(m_Id);
        }
        return;
    }

    if (propName == QStringLiteral("Ip4Config"))
    {
        const QDBusObjectPath Ip4Config = qvariant_cast<QDBusObjectPath>(value);
        if (m_Ip4Config != Ip4Config)
        {
            m_Ip4Config = Ip4Config;
            emit Ip4ConfigChanged(m_Ip4Config);
        }
        return;
    }

    if (propName == QStringLiteral("Ip6Config"))
    {
        const QDBusObjectPath Ip6Config = qvariant_cast<QDBusObjectPath>(value);
        if (m_Ip6Config != Ip6Config)
        {
            m_Ip6Config = Ip6Config;
            emit Ip6ConfigChanged(m_Ip6Config);
        }
        return;
    }

    if (propName == QStringLiteral("Master"))
    {
        const QDBusObjectPath Master = qvariant_cast<QDBusObjectPath>(value);
        if (m_Master != Master)
        {
            m_Master = Master;
            emit MasterChanged(m_Master);
        }
        return;
    }

    if (propName == QStringLiteral("SpecificObject"))
    {
        const QDBusObjectPath SpecificObject = qvariant_cast<QDBusObjectPath>(value);
        if (m_SpecificObject != SpecificObject)
        {
            m_SpecificObject = SpecificObject;
            emit SpecificObjectChanged(m_SpecificObject);
        }
        return;
    }

    if (propName == QStringLiteral("State"))
    {
        const uint State = qvariant_cast<uint>(value);
        if (m_State != State)
        {
            m_State = State;
            emit StateChanged(m_State);
        }
        return;
    }

    if (propName == QStringLiteral("Type"))
    {
        const QString Type = qvariant_cast<QString>(value);
        if (m_Type != Type)
        {
            m_Type = Type;
            emit TypeChanged(m_Type);
        }
        return;
    }

    if (propName == QStringLiteral("Uuid"))
    {
        const QString Uuid = qvariant_cast<QString>(value);
        if (m_Uuid != Uuid)
        {
            m_Uuid = Uuid;
            emit UuidChanged(m_Uuid);
        }
        return;
    }

    if (propName == QStringLiteral("Vpn"))
    {
        const bool Vpn = qvariant_cast<bool>(value);
        if (m_Vpn != Vpn)
        {
            m_Vpn = Vpn;
            emit VpnChanged(m_Vpn);
        }
        return;
    }

    qWarning() << "property not handle: " << propName;
    return;
}
