/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c ActiveConnection -p generated/org_freedesktop_networkmanager_activeconnection /home/kazushin/WorkSpace/Deepin/dde-qt-dbus-factory/xml/org.freedesktop.NetworkManager.ActiveConnection.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_FREEDESKTOP_NETWORKMANAGER_ACTIVECONNECTION_H
#define ORG_FREEDESKTOP_NETWORKMANAGER_ACTIVECONNECTION_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.freedesktop.NetworkManager.Connection.Active
 */
class __ActiveConnection : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.NetworkManager.Connection.Active"; }

public:
    explicit __ActiveConnection(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__ActiveConnection();

    Q_PROPERTY(QDBusObjectPath Connection READ connection NOTIFY ConnectionChanged)
    inline QDBusObjectPath connection()
    { return qvariant_cast< QDBusObjectPath >(internalPropGet("Connection", &m_Connection)); }

    Q_PROPERTY(bool Default6 READ default6 NOTIFY Default6Changed)
    inline bool default6()
    { return qvariant_cast< bool >(internalPropGet("Default6", &m_Default6)); }

    Q_PROPERTY(QList<QDBusObjectPath> Devices READ devices NOTIFY DevicesChanged)
    inline QList<QDBusObjectPath> devices()
    { return qvariant_cast< QList<QDBusObjectPath> >(internalPropGet("Devices", &m_Devices)); }

    Q_PROPERTY(QDBusObjectPath Dhcp4Config READ dhcp4Config NOTIFY Dhcp4ConfigChanged)
    inline QDBusObjectPath dhcp4Config()
    { return qvariant_cast< QDBusObjectPath >(internalPropGet("Dhcp4Config", &m_Dhcp4Config)); }

    Q_PROPERTY(QDBusObjectPath Dhcp6Config READ dhcp6Config NOTIFY Dhcp6ConfigChanged)
    inline QDBusObjectPath dhcp6Config()
    { return qvariant_cast< QDBusObjectPath >(internalPropGet("Dhcp6Config", &m_Dhcp6Config)); }

    Q_PROPERTY(QString Id READ id NOTIFY IdChanged)
    inline QString id()
    { return qvariant_cast< QString >(internalPropGet("Id", &m_Id)); }

    Q_PROPERTY(QDBusObjectPath Ip4Config READ ip4Config NOTIFY Ip4ConfigChanged)
    inline QDBusObjectPath ip4Config()
    { return qvariant_cast< QDBusObjectPath >(internalPropGet("Ip4Config", &m_Ip4Config)); }

    Q_PROPERTY(QDBusObjectPath Ip6Config READ ip6Config NOTIFY Ip6ConfigChanged)
    inline QDBusObjectPath ip6Config()
    { return qvariant_cast< QDBusObjectPath >(internalPropGet("Ip6Config", &m_Ip6Config)); }

    Q_PROPERTY(QDBusObjectPath Master READ master NOTIFY MasterChanged)
    inline QDBusObjectPath master()
    { return qvariant_cast< QDBusObjectPath >(internalPropGet("Master", &m_Master)); }

    Q_PROPERTY(QDBusObjectPath SpecificObject READ specificObject NOTIFY SpecificObjectChanged)
    inline QDBusObjectPath specificObject()
    { return qvariant_cast< QDBusObjectPath >(internalPropGet("SpecificObject", &m_SpecificObject)); }

    Q_PROPERTY(uint State READ state NOTIFY StateChanged)
    inline uint state()
    { return qvariant_cast< uint >(internalPropGet("State", &m_State)); }

    Q_PROPERTY(QString Type READ type NOTIFY TypeChanged)
    inline QString type()
    { return qvariant_cast< QString >(internalPropGet("Type", &m_Type)); }

    Q_PROPERTY(QString Uuid READ uuid NOTIFY UuidChanged)
    inline QString uuid()
    { return qvariant_cast< QString >(internalPropGet("Uuid", &m_Uuid)); }

    Q_PROPERTY(bool Vpn READ vpn NOTIFY VpnChanged)
    inline bool vpn()
    { return qvariant_cast< bool >(internalPropGet("Vpn", &m_Vpn)); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
// begin property changed signals
    void ConnectionChanged(const QDBusObjectPath & value) const;
    void DefaultChanged(bool  value) const;
    void Default6Changed(bool  value) const;
    void DevicesChanged(const QList<QDBusObjectPath> & value) const;
    void Dhcp4ConfigChanged(const QDBusObjectPath & value) const;
    void Dhcp6ConfigChanged(const QDBusObjectPath & value) const;
    void IdChanged(const QString & value) const;
    void Ip4ConfigChanged(const QDBusObjectPath & value) const;
    void Ip6ConfigChanged(const QDBusObjectPath & value) const;
    void MasterChanged(const QDBusObjectPath & value) const;
    void SpecificObjectChanged(const QDBusObjectPath & value) const;
    void StateChanged(uint  value) const;
    void TypeChanged(const QString & value) const;
    void UuidChanged(const QString & value) const;
    void VpnChanged(bool  value) const;

// begin private slots
private Q_SLOTS:
    void onPropertyChanged(const QString &propName, const QVariant &value);

// begin private member vaiables
private:
    QDBusObjectPath m_Connection;
    bool m_Default;
    bool m_Default6;
    QList<QDBusObjectPath> m_Devices;
    QDBusObjectPath m_Dhcp4Config;
    QDBusObjectPath m_Dhcp6Config;
    QString m_Id;
    QDBusObjectPath m_Ip4Config;
    QDBusObjectPath m_Ip6Config;
    QDBusObjectPath m_Master;
    QDBusObjectPath m_SpecificObject;
    uint m_State;
    QString m_Type;
    QString m_Uuid;
    bool m_Vpn;
};

namespace org {
  namespace freedesktop {
    namespace networkmanager {
      namespace connection {
        typedef ::__ActiveConnection Active;
      }
    }
  }
}
#endif
