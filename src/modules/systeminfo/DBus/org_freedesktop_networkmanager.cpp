/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c NetworkManager -p generated/org_freedesktop_networkmanager /home/kazushin/WorkSpace/Deepin/dde-qt-dbus-factory/xml/org.freedesktop.NetworkManager.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "org_freedesktop_networkmanager.h"

/*
 * Implementation of interface class __NetworkManager
 */

__NetworkManager::__NetworkManager(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : DBusExtendedAbstractInterface(service, path, staticInterfaceName(), connection, parent)
{
    connect(this, &__NetworkManager::propertyChanged, this, &__NetworkManager::onPropertyChanged);

}

__NetworkManager::~__NetworkManager()
{
}

void __NetworkManager::onPropertyChanged(const QString &propName, const QVariant &value)
{
    if (propName == QStringLiteral("ActiveConnections"))
    {
        const QList<QDBusObjectPath> ActiveConnections = qvariant_cast<QList<QDBusObjectPath>>(value);
        if (m_ActiveConnections != ActiveConnections)
        {
            m_ActiveConnections = ActiveConnections;
            emit ActiveConnectionsChanged(m_ActiveConnections);
        }
        return;
    }

    if (propName == QStringLiteral("PrimaryConnection"))
    {
        const QDBusObjectPath PrimaryConnection = qvariant_cast<QDBusObjectPath>(value);
        if (m_PrimaryConnection != PrimaryConnection)
        {
            m_PrimaryConnection = PrimaryConnection;
            emit PrimaryConnectionChanged(m_PrimaryConnection);
        }
        return;
    }

    if (propName == QStringLiteral("PrimaryConnectionType"))
    {
        const QString PrimaryConnectionType = qvariant_cast<QString>(value);
        if (m_PrimaryConnectionType != PrimaryConnectionType)
        {
            m_PrimaryConnectionType = PrimaryConnectionType;
            emit PrimaryConnectionTypeChanged(m_PrimaryConnectionType);
        }
        return;
    }

    qWarning() << "property not handle: " << propName;
    return;
}
